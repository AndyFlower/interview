package com.slp.demo.interview;

/**
 * @author sanglp
 * @create 2018-12-19 17:08
 * @desc TreeMap与TreeSet实现原理是什么
 **/
public class TreeMap和TreeSet {

    private void what(){
        /**
         *   TreeMap和TreeSet算是java集合类里面比较有难度的数据结构。和普通的HashMap不一样，
         *   普通的HashMap元素存取的时间复杂度一般是O(1)的范围。而TreeMap内部对元素的操作复杂度为O(logn)。
         *   虽然在元素的存取方面TreeMap并不占优，但是它内部的元素都是排序的，当需要查找某些元素以及顺序输出元素的时候它能够带来比较理想的结果。可以说，
         *   TreeMap是一个内部元素排序版的HashMap。
         *   这里会对TreeMap内部的具体实现机制和它所基于的红黑树做一个详细的介绍
         */
    }

    private void extend(){
        /**
         * 红黑树(Red-Black Tree)
         *
         *     红黑树本质上是一棵一定程度上相对平衡的二叉搜索树。为什么这么说呢？我们从前面讨论二叉搜索树的文章中可以看到。一棵二叉搜索树理想情况下的搜索和其他元素操作的时间复杂度是O(logn)。但是，这是基于一个前提，即二叉搜索树本身构造出来的树是平衡的。如果我们按照普通的插入一个元素就按照二叉树对应关系去摆的话，在一些极端的情况下会失去平衡。比如说我们通过插入一个顺序递增或者递减的一组元素，那么最后的结构就相当于一个双向链表。对其中元素的访问也不可能达到O(logn)这样的级别。
         *
         *     所以，在这样的情况下，我们就希望有那么一种机制或者数据结构能够保证我们既能构造出一棵二叉搜索树来，而且它天生就是平衡的。这样就有了红黑树。当然，为了同时达到这两个目标，红黑树设定了一些特定的属性限制，也使得它本身的实现比较复杂。我们在下面的定义中就可以看到。
         *
         *     红黑树的官方定义如下：
         *
         * 红黑树是一种二叉树，同时它还满足下列5个特性：
         *
         * 1. 每个节点是红色或者黑色的。
         *
         * 2. 根节点是黑色的。
         *
         * 3. 每个叶节点是黑色的。（这里将叶节点的左右空子节点作为一个特殊的节点对待，设定他们必须是黑色的。）
         *
         * 4. 如果一个节点是红色的，则它的左右子节点都必须是黑色的。
         *
         * 5. 对任意一个节点来说，从它到叶节点的所有路径必须包含相同数目的黑色节点。
         */
    }

    private void add(){
        /**
         * 添加元素的过程可以大致的分为两个步骤。和前面的二叉搜索树类似，我们添加元素也是需要通过比较元素的值，找到添加元素的地方。这部分基本上没有什么变化。第二步则是一个调整的过程。因为红黑树不一样，当我们添加一个新的元素之后可能会破坏它固有的属性。主要在于两个地方，一个是要保证新加入元素后，到所有叶节点的黑色节点还是一样的。另外也要保证红色节点的子节点为黑色节点。
         *
         *     还有一个就是，结合TreeMap的map特性，我们添加元素的时候也可能会出现新加入的元素key已经在数中间存在了，那么这个时候就不是新加入元素，而是要更新原有元素的值。
         */
    }
}
